
@article{hunter_matplotlib_2007,
  title = {Matplotlib: {{A 2D Graphics Environment}}},
  volume = {9},
  issn = {1521-9615},
  shorttitle = {Matplotlib},
  doi = {10.1109/MCSE.2007.55},
  abstract = {Scitation is the online home of leading journals and conference proceedings from AIP Publishing and AIP Member Societies},
  number = {3},
  journal = {Computing in Science \& Engineering},
  author = {Hunter, John D.},
  month = may,
  year = {2007},
  pages = {90-95},
  file = {/Users/willbarnes/Zotero/storage/I4VRS4B2/MCSE.2007.html}
}

@article{van_der_walt_numpy_2011,
  title = {The {{NumPy Array}}: {{A Structure}} for {{Efficient Numerical Computation}}},
  volume = {13},
  issn = {1521-9615},
  shorttitle = {The {{NumPy Array}}},
  doi = {10.1109/MCSE.2011.37},
  abstract = {In the Python world, NumPy arrays are the standard representation for numerical data and enable efficient implementation of numerical computations in a high-level language. As this effort shows, NumPy performance can be improved through three techniques: vectorizing calculations, avoiding copying data in memory, and minimizing operation counts.},
  number = {2},
  journal = {Computing in Science \& Engineering},
  author = {{van der Walt}, St\'efan and Colbert, S. Chris and Varoquaux, Ga\"el},
  month = mar,
  year = {2011},
  pages = {22-30},
  file = {/Users/willbarnes/Zotero/storage/IB7A36G3/MCSE.2011.html}
}

@article{pedregosa_scikit-learn_2011,
  title = {Scikit-Learn: {{Machine Learning}} in {{Python}}},
  volume = {12},
  shorttitle = {Scikit-Learn},
  abstract = {Scikit-learn is a Python module integrating a wide range of state-of-the-art machine learning algorithms for medium-scale supervised and unsupervised problems. This package focuses on bringing machine learning to non-specialists using a general-purpose high-level language.  Emphasis is put on ease of use, performance, documentation, and API consistency.  It has minimal dependencies and is distributed under the simplified BSD license, encouraging its use in both academic and commercial settings.  Source code, binaries, and documentation can be downloaded from http://scikit-learn.sourceforge.net.},
  journal = {Journal of Machine Learning Research},
  author = {Pedregosa, Fabian and Varoquaux, Ga\"el and Gramfort, Alexandre and Michel, Vincent and Thirion, Bertrand and Grisel, Olivier and Blondel, Mathieu and Prettenhofer, Peter and Weiss, Ron and Dubourg, Vincent and Vanderplas, Jake and Passos, Alexandre and Cournapeau, David and Brucher, Matthieu and Perrot, Matthieu and Duchesnay, \'Edouard},
  month = oct,
  year = {2011},
  pages = {2825-2830},
  file = {/Users/willbarnes/Google Drive/School/Papers/Pedregosa_et_al_2011.pdf}
}

@article{sunpy_community_sunpypython_2015,
  title = {{{SunPy}}\textemdash{{Python}} for Solar Physics},
  volume = {8},
  doi = {10.1088/1749-4699/8/1/014009},
  abstract = {This paper presents SunPy (version 0.5), a community-developed Python package for solar physics. Python, a free, cross-platform,
general-purpose, high-level programming language, has seen widespread adoption among the scientific community, resulting in the availability of a large number of software packages, from numerical computation (NumPy, SciPy) and machine learning (scikit-learn) to visualization and plotting (matplotlib). SunPy is a data-analysis environment specializing in providing the software necessary to analyse solar and heliospheric data in Python. SunPy is open-source software (BSD licence) and has an open and transparent development workflow that anyone can contribute to. SunPy provides access to solar data through integration with the Virtual Solar Observatory (VSO), the Heliophysics Event Knowledgebase (HEK), and the HELiophysics Integrated Observatory (HELIO) webservices. It
currently supports image data from major solar missions (e.g., SDO, SOHO, STEREO, and IRIS), time-series data from missions such as GOES, SDO/EVE, and PROBA2/LYRA, and radio spectra from e-Callisto and
STEREO/SWAVES. We describe SunPy's functionality, provide examples of solar data analysis in SunPy, and show how Python-based solar data-analysis can leverage the many existing tools already available in Python. We discuss the future goals of the project and encourage interested users to become involved in the planning and development of SunPy.},
  journal = {Computational Science and Discovery},
  author = {{SunPy Community} and Mumford, Stuart J. and Christe, Steven and {P\'erez-Su\'arez}, David and Ireland, Jack and Shih, Albert Y. and Inglis, Andrew R. and Liedtke, Simon and Hewett, Russell J. and Mayer, Florian and Hughitt, Keith and Freij, Nabil and Meszaros, Tomas and Bennett, Samuel M. and Malocha, Michael and Evans, John and Agrawal, Ankit and Leonard, Andrew J. and Robitaille, Thomas P. and Mampaey, Benjamin and {Campos-Rozo}, Jose Iv\'an and Kirk, Michael S.},
  month = jan,
  year = {2015},
  pages = {014009}
}

@misc{dask_development_team_dask_2016,
  title = {Dask: {{Library}} for Dynamic Task Scheduling},
  author = {{Dask Development Team}},
  year = {2016}
}

@misc{jones_scipy_2001,
  title = {{{SciPy}}: {{Open}} Source Scientific Tools for {{Python}}},
  author = {Jones, Eric and Oliphant, Travis and Peterson, Pearu and {others}},
  year = {2001--present}
}

@article{the_astropy_collaboration_astropy_2018,
  title = {The {{Astropy Project}}: {{Building}} an {{Open}}-Science {{Project}} and {{Status}} of the v2.0 {{Core Package}}},
  volume = {156},
  issn = {0004-6256},
  shorttitle = {The {{Astropy Project}}},
  doi = {10.3847/1538-3881/aabc4f},
  abstract = {The Astropy Project supports and fosters the development of open-source 
and openly developed Python packages that provide commonly needed
functionality to the astronomical community. A key element of the
Astropy Project is the core package astropy, which serves as the
foundation for more specialized projects and packages. In this article,
we provide an overview of the organization of the Astropy project and
summarize key features in the core package, as of the recent major
release, version 2.0. We then describe the project infrastructure
designed to facilitate and support development for a broader ecosystem
of interoperable packages. We conclude with a future outlook of planned
new features and directions for the broader Astropy Project.

.},
  journal = {The Astronomical Journal},
  author = {{The Astropy Collaboration} and {Price-Whelan}, A. M. and Sip{\H o}cz, B. M. and G\"unther, H. M. and Lim, P. L. and Crawford, S. M. and Conseil, S. and Shupe, D. L. and Craig, M. W. and Dencheva, N. and Ginsburg, A. and VanderPlas, J. T. and Bradley, L. D. and {P\'erez-Su\'arez}, D. and {de Val-Borro}, M. and Paper Contributors, (Primary and Aldcroft, T. L. and Cruz, K. L. and Robitaille, T. P. and Tollerud, E. J. and Coordination Committee, (Astropy and Ardelean, C. and Babej, T. and Bach, Y. P. and Bachetti, M. and Bakanov, A. V. and Bamford, S. P. and Barentsen, G. and Barmby, P. and Baumbach, A. and Berry, K. L. and Biscani, F. and Boquien, M. and Bostroem, K. A. and Bouma, L. G. and Brammer, G. B. and Bray, E. M. and Breytenbach, H. and Buddelmeijer, H. and Burke, D. J. and Calderone, G. and Cano Rodr\'iguez, J. L. and Cara, M. and Cardoso, J. V. M. and Cheedella, S. and Copin, Y. and Corrales, L. and Crichton, D. and D'Avella, D. and Deil, C. and Depagne, \'E. and Dietrich, J. P. and Donath, A. and Droettboom, M. and Earl, N. and Erben, T. and Fabbro, S. and Ferreira, L. A. and Finethy, T. and Fox, R. T. and Garrison, L. H. and Gibbons, S. L. J. and Goldstein, D. A. and Gommers, R. and Greco, J. P. and Greenfield, P. and Groener, A. M. and Grollier, F. and Hagen, A. and Hirst, P. and Homeier, D. and Horton, A. J. and Hosseinzadeh, G. and Hu, L. and Hunkeler, J. S. and Ivezi\'c, {\v Z}. and Jain, A. and Jenness, T. and Kanarek, G. and Kendrew, S. and Kern, N. S. and Kerzendorf, W. E. and Khvalko, A. and King, J. and Kirkby, D. and Kulkarni, A. M. and Kumar, A. and Lee, A. and Lenz, D. and Littlefair, S. P. and Ma, Z. and Macleod, D. M. and Mastropietro, M. and McCully, C. and Montagnac, S. and Morris, B. M. and Mueller, M. and Mumford, S. J. and Muna, D. and Murphy, N. A. and Nelson, S. and Nguyen, G. H. and Ninan, J. P. and N\"othe, M. and Ogaz, S. and Oh, S. and Parejko, J. K. and Parley, N. and Pascual, S. and Patil, R. and Patil, A. A. and Plunkett, A. L. and Prochaska, J. X. and Rastogi, T. and Reddy Janga, V. and Sabater, J. and Sakurikar, P. and Seifert, M. and Sherbert, L. E. and {Sherwood-Taylor}, H. and Shih, A. Y. and Sick, J. and Silbiger, M. T. and Singanamalla, S. and Singer, L. P. and Sladen, P. H. and Sooley, K. A. and Sornarajah, S. and Streicher, O. and Teuben, P. and Thomas, S. W. and Tremblay, G. R. and Turner, J. E. H. and Terr\'on, V. and {van Kerkwijk}, M. H. and {de la Vega}, A. and Watkins, L. L. and Weaver, B. A. and Whitmore, J. B. and Woillez, J. and Zabalza, V. and Contributors, (Astropy},
  month = sep,
  year = {2018},
  keywords = {methods: data analysis,methods: miscellaneous,methods: statistical,reference systems},
  pages = {123},
  file = {/Users/willbarnes/Google Drive/School/Papers/The Astropy Collaboration et al_2018_The Astropy Project.pdf}
}

@misc{waskom_seaborn_2018,
  title = {Seaborn: V0.9.0},
  shorttitle = {Mwaskom/{{Seaborn}}},
  abstract = {v0.9.0 (July 2018)
Note: a version of these release notes with working links appears in the online documentation.
This is a major release with several substantial and long-desired new features. There are also updates/modifications to the themes and color palettes that give better consistency with matplotlib 2.0 and some notable API changes.
New relational plots
Three completely new plotting functions have been added: catplot, scatterplot, and lineplot. The first is a figure-level interface to the latter two that combines them with a FacetGrid. The functions bring the high-level, dataset-oriented API of the seaborn categorical plotting functions to more general plots (scatter plots and line plots).
These functions can visualize a relationship between two numeric variables while mapping up to three additional variables by modifying $<$code$>$hue$<$/code$>$, $<$code$>$size$<$/code$>$, and/or $<$code$>$style$<$/code$>$ semantics. The common high-level API is implemented differently in the two functions. For example, the size semantic in scatterplot scales the area of scatter plot points, but in lineplot it scales width of the line plot lines. The API is dataset-oriented, meaning that in both cases you pass the variable in your dataset rather than directly specifying the matplotlib parameters to use for point area or line width.
Another way the relational functions differ from existing seaborn functionality is that they have better support for using numeric variables for $<$code$>$hue$<$/code$>$ and $<$code$>$size$<$/code$>$ semantics. This functionality may be propagated to other functions that can add a $<$code$>$hue$<$/code$>$ semantic in future versions; it has not been in this release.
The lineplot function also has support for statistical estimation and is replacing the older $<$code$>$tsplot$<$/code$>$ function, which still exists but is marked for removal in a future release. lineplot is better aligned with the API of the rest of the library and more flexible in showing relationships across additional variables by modifying the size and style semantics independently. It also has substantially improved support for date and time data, a major pain factor in $<$code$>$tsplot$<$/code$>$. The cost is that some of the more esoteric options in $<$code$>$tsplot$<$/code$>$ for representing uncertainty (e.g. a colormapped KDE of the bootstrap distribution) have not been implemented in the new function.
There is quite a bit of new documentation that explains these new functions in more detail, including detailed examples of the various options in the API reference and a more verbose tutorial.
These functions should be considered in a "stable beta" state. They have been thoroughly tested, but some unknown corner cases may remain to be found. The main features are in place, but not all planned functionality has been implemented. There are planned improvements to some elements, particularly the default legend, that are a little rough around the edges in this release. Finally, some of the default behavior (e.g. the default range of point/line sizes) may change somewhat in future releases.
Updates to themes and palettes
Several changes have been made to the seaborn style themes, context scaling, and color palettes. In general the aim of these changes was to make the seaborn styles more consistent with the style updates in matplotlib 2.0 and to leverage some of the new style parameters for better implementation of some aspects of the seaborn styles. Here is a list of the changes:

Reorganized and updated some axes\_style/plotting\_context parameters to take advantage of improvements in the matplotlib 2.0 update. The biggest change involves using several new parameterss in the "style" spec while moving parameters that used to implement the corresponding aesthetics to the "context" spec. For example, axes spines and ticks are now off instead of having their width/length zeroed out for the darkgrid style. That means the width/length of these elements can now be scaled in different contexts. The effect is a more cohesive appearance of the plots, especially in larger contexts. These changes include only minimal support for the 1.x matplotlib series. Users who are stuck on matplotlib 1.5 but wish to use seaborn styling may want to use the seaborn parameters that can be accessed through the matplotlib stylesheet interface.
Updated the seaborn palettes ("deep", "muted", "colorblind", etc.) to correspond with the new 10-color matplotlib default. The legacy palettes are now available at "deep6", "muted6", "colorblind6", etc. Additionally, a few individual colors were tweaked for better consistency, aesthetics, and accessibility.
Calling color\_palette (or set\_palette) with a named qualitative palettes (i.e. one of the seaborn palettes, the colorbrewer qualitative palettes, or the matplotlib matplotlib tableau-derived palettes) and no specified number of colors will return all of the colors in the palette. This means that for some palettes, the returned list will have a different length than it did in previous versions.
Enhanced color\_palette to accept a parameterized specification of a cubehelix palette in in a string, prefixed with $<$code$>$"ch:"$<$/code$>$ (e.g. $<$code$>$"ch:-.1,.2,l=.7"$<$/code$>$). Note that keyword arguments can be spelled out or referenced using only their first letter. Reversing the palette is accomplished by appending $<$code$>$"\_r"$<$/code$>$, as with other matplotlib colormaps. This specification will be accepted by any seaborn function with a $<$code$>$palette=$<$/code$>$ parameter.
Slightly increased the base font sizes in plotting\_context and increased the scaling factors for $<$code$>$"talk"$<$/code$>$ and $<$code$>$"poster"$<$/code$>$ contexts.
Calling set will now call set\_color\_codes to re-assign the single letter color codes by default

API changes
A few functions have been renamed or have had changes to their default parameters.

The $<$code$>$factorplot$<$/code$>$ function has been renamed to catplot. The new name ditches the original R-inflected terminology to use a name that is more consistent with terminology in pandas and in seaborn itself. This change should hopefully make catplot easier to discover, and it should make more clear what its role is. $<$code$>$factorplot$<$/code$>$ still exists and will pass its arguments through to catplot with a warning. It may be removed eventually, but the transition will be as gradual as possible.
The other reason that the $<$code$>$factorplot$<$/code$>$ name was changed was to ease another alteration which is that the default $<$code$>$kind$<$/code$>$ in catplot is now $<$code$>$"strip"$<$/code$>$ (corresponding to stripplot). This plots a categorical scatter plot which is usually a much better place to start and is more consistent with the default in relplot. The old default style in $<$code$>$factorplot$<$/code$>$ ($<$code$>$"point"$<$/code$>$, corresponding to pointplot) remains available if you want to show a statistical estimation.
The $<$code$>$lvplot$<$/code$>$ function has been renamed to boxenplot. The "letter-value" terminology that was used to name the original kind of plot is obscure, and the abbreviation to $<$code$>$lv$<$/code$>$ did not help anything. The new name should make the plot more discoverable by describing its format (it plots multiple boxes, also known as "boxen"). As with $<$code$>$factorplot$<$/code$>$, the $<$code$>$lvplot$<$/code$>$ function still exists to provide a relatively smooth transition.
Renamed the $<$code$>$size$<$/code$>$ parameter to $<$code$>$height$<$/code$>$ in multi-plot grid objects (FacetGrid, PairGrid, and JointGrid) along with functions that use them ($<$code$>$factorplot$<$/code$>$, lmplot, pairplot, and jointplot) to avoid conflicts with the $<$code$>$size$<$/code$>$ parameter that is used in $<$code$>$scatterplot$<$/code$>$ and $<$code$>$lineplot$<$/code$>$ (necessary to make relplot work) and also makes the meaning of the parameter a bit more clear.
Changed the default diagonal plots in pairplot to use ‘func‘:kdeplot‘ when a $<$code$>$"hue"$<$/code$>$ dimension is used.
Deprecated the statistical annotation component of JointGrid. The method is still available but will be removed in a future version.
Two older functions that were deprecated in earlier versions, $<$code$>$coefplot$<$/code$>$ and $<$code$>$interactplot$<$/code$>$, have undergone final removal from the code base.

Documentation improvements
There has been some effort put into improving the documentation. The biggest change is that the introduction to the library has been completely rewritten to provide much more information and, critically, examples. In addition to the high-level motivation, the introduction also covers some important topics that are often sources of confusion, like the distinction between figure-level and axes-level functions, how datasets should be formatted for use in seaborn, and how to customize the appearance of the plots.
Other improvements have been made throughout, most notably a thorough re-write of the categorical tutorial categorical\_tutorial.
Other small enhancements and bug fixes

Changed rugplot to plot a matplotlib $<$code$>$LineCollection$<$/code$>$ instead of many $<$code$>$Line2D$<$/code$>$ objects, providing a big speedup for large arrays.
Changed the default off-diagonal plots to use scatterplot. (Note that the $<$code$>$"hue"$<$/code$>$ currently draws three separate scatterplots instead of using the hue semantic of the scatterplot function).
Changed color handling when using kdeplot with two variables. The default colormap for the 2D density now follows the color cycle, and the function can use $<$code$>$color$<$/code$>$ and $<$code$>$label$<$/code$>$ kwargs, adding more flexibility and avoiding a warning when using with multi-plot grids.
Added the $<$code$>$subplot\_kws$<$/code$>$ parameter to PairGrid for more flexibility.
Removed a special case in PairGrid that defaulted to drawing stacked histograms on the diagonal axes.
Fixed jointplot/JointGrid and regplot so that they now accept list inputs.
Fixed a bug in FacetGrid when using a single row/column level or using $<$code$>$col\_wrap=1$<$/code$>$.
Fixed functions that set axis limits so that they preserve auto-scaling state on matplotlib 2.0.
Avoided an error when using matplotlib backends that cannot render a canvas (e.g. PDF).
Changed the install infrastructure to explicitly declare dependencies in a way that $<$code$>$pip$<$/code$>$ is aware of. This means that $<$code$>$pip install seaborn$<$/code$>$ will now work in an empty environment. Additionally, the dependencies are specified with strict minimal versions.
Updated the testing infrastructure to execute tests with pytest (although many individual tests still use nose assertion).},
  publisher = {{Zenodo}},
  author = {Waskom, Michael and Botvinnik, Olga and O'Kane, Drew and Hobson, Paul and Ostblom, Joel and Lukauskas, Saulius and Gemperline, David C and Augspurger, Tom and Halchenko, Yaroslav and Cole, John B. and Warmenhoven, Jordi and Ruiter, Julian De and Pye, Cameron and Hoyer, Stephan and Vanderplas, Jake and Villalba, Santi and Kunter, Gero and Quintero, Eric and Bachant, Pete and Martin, Marcel and Meyer, Kyle and Miles, Alistair and Ram, Yoav and Brunner, Thomas and Yarkoni, Tal and Williams, Mike Lee and Evans, Constantine and Fitzgerald, Clark and , Brian and Qalieh, Adel},
  month = jul,
  year = {2018},
  doi = {10.5281/zenodo.1313201}
}


